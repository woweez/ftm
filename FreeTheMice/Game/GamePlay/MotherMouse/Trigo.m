//
//  Trigo.m
//  Game
//
//  Created by karthik gopal on 13/11/08.
//  Copyright 2008 __MyCompanyName__. All rights reserved.
//

#import "Trigo.h"


@implementation Trigo

float val[]={
2,100,        3,100,        5,100,        7,100,        9,100,        10,99,        12,99,        14,99,
16,99,        17,98,        19,98,        21,98,        22,97,        24,97,        26,97,        28,96,
29,96,        31,95,        33,95,        34,94,        36,93,        37,93,        39,92,        41,91,
42,91,        44,90,        45,89,        47,88,        48,87,        50,87,        51,86,        53,85,
54,84,        56,83,        57,82,        59,81,        60,80,        62,79,        63,78,        64,77,
66,75,        67,74,        68,73,        69,72,        71,71,        72,69,        73,68,        74,67,
75,66,        77,64,        78,63,        79,62,        80,60,        81,59,        82,57,        83,56,
84,55,        85,53,        86,52,        87,50,        87,49,        88,47,        89,45,        90,44,
91,42,        91,41,        92,39,        93,38,        93,36,        94,34,        95,33,        95,31,
96,29,        96,28,        97,26,        97,24,        97,23,        98,21,        98,19,        98,17,
99,16,        99,14,        99,12,        99,11,        100,9,        100,7,        100,5,        100,4,
100,2,        100,0,        100,-2,       100,-3,       100,-5,       100,-7,       100,-9,       99,-10,
99,-12,       99,-14,       99,-16,       98,-17,       98,-19,       98,-21,       97,-22,       97,-24,
97,-26,       96,-27,       96,-29,       95,-31,       95,-32,       94,-34,       93,-36,       93,-37,
92,-39,       91,-41,       91,-42,       90,-44,       89,-45,       88,-47,       88,-48,       87,-50,
86,-51,       85,-53,       84,-54,       83,-56,       82,-57,       81,-59,       80,-60,       79,-61,
78,-63,       77,-64,       76,-66,       74,-67,       73,-68,       72,-69,       71,-71,       70,-72,
68,-73,       67,-74,       66,-75,       64,-77,       63,-78,       62,-79,       60,-80,       59,-81,
57,-82,       56,-83,       55,-84,       53,-85,       52,-86,       50,-87,       49,-87,       47,-88,
46,-89,       44,-90,       42,-91,       41,-91,       39,-92,       38,-93,       36,-93,       34,-94,
33,-95,       31,-95,       29,-96,       28,-96,       26,-97,       24,-97,       23,-97,       21,-98,
19,-98,       18,-98,       16,-99,       14,-99,       12,-99,       11,-99,       9,-100,       7,-100,
5,-100,       4,-100,       2,-100,       0,-100,       -2,-100,      -3,-100,      -5,-100,      -7,-100,
-9,-100,      -10,-99,      -12,-99,      -14,-99,      -15,-99,      -17,-99,      -19,-98,      -21,-98,
-22,-97,      -24,-97,      -26,-97,      -27,-96,      -29,-96,      -31,-95,      -32,-95,      -34,-94,
-36,-93,      -37,-93,      -39,-92,      -41,-91,      -42,-91,      -44,-90,      -45,-89,      -47,-88,
-48,-88,      -50,-87,      -51,-86,      -53,-85,      -54,-84,      -56,-83,      -57,-82,      -59,-81,
-60,-80,      -61,-79,      -63,-78,      -64,-77,      -65,-76,      -67,-74,      -68,-73,      -69,-72,
-71,-71,      -72,-70,      -73,-68,      -74,-67,      -75,-66,      -76,-64,      -78,-63,      -79,-62,
-80,-60,      -81,-59,      -82,-58,      -83,-56,      -84,-55,      -85,-53,      -86,-52,      -86,-50,
-87,-49,      -88,-47,      -89,-46,      -90,-44,      -91,-42,      -91,-41,      -92,-39,      -93,-38,
-93,-36,      -94,-34,      -94,-33,      -95,-31,      -96,-29,      -96,-28,      -97,-26,      -97,-24,
-97,-23,      -98,-21,      -98,-19,      -98,-18,      -99,-16,      -99,-14,      -99,-12,      -99,-11,
-100,-9,      -100,-7,      -100,-5,      -100,-4,      -100,-2,      -100,0,       -100,2,       -100,3,
-100,5,       -100,7,       -100,8,       -99,10,       -99,12,       -99,14,       -99,15,       -99,17,
-98,19,       -98,21,       -97,22,       -97,24,       -97,26,       -96,27,       -96,29,       -95,31,
-95,32,       -94,34,       -93,36,       -93,37,       -92,39,       -91,40,       -91,42,       -90,44,
-89,45,       -88,47,       -88,48,       -87,50,       -86,51,       -85,53,       -84,54,       -83,56,
-82,57,       -81,59,       -80,60,       -79,61,       -78,63,       -77,64,       -76,65,       -74,67,
-73,68,       -72,69,       -71,71,       -70,72,       -68,73,       -67,74,       -66,75,       -64,76,
-63,78,       -62,79,       -60,80,       -59,81,       -58,82,       -56,83,       -55,84,       -53,85,
-52,86,       -50,86,       -49,87,       -47,88,       -46,89,       -44,90,       -43,91,       -41,91,
-39,92,       -38,93,       -36,93,       -34,94,       -33,94,       -31,95,       -30,96,       -28,96,
-26,97,       -24,97,       -23,97,       -21,98,       -19,98,       -18,98,       -16,99,       -14,99,
-12,99,       -11,99,       -9,100,       -7,100,       -6,100,       -4,100,       -2,100,       0,100

};

-(int) sin:(int) angle {
	if(angle < 0)
		angle += 360;
	else if(angle >= 360)
		angle -= 360;
	
	return val[angle * 2];
}

-(int) cos:(int) angle {
	if(angle < 0)
		angle += 360;
	else if(angle >= 360)
		angle -= 360;
	
	return val[(angle * 2) + 1];
}

-(float) circlex:(float) radius a:(float)angle {
	return [self cos:angle]*radius/80;
}

-(float) circley:(float) radius a:(float) angle {
	return [self sin:angle]*radius/80;
}

-(float) bounceCirclex:(float) radius a:(float)angle {
	return [self cos:angle]*radius/2500;
}

-(float) bounceCircley:(float) radius a:(float) angle {
	return [self sin:angle]*radius/2500;
}

-(CGFloat)findAngle:(CGFloat)mainX lmainY:(CGFloat)mainY lfindX:(CGFloat)findX lfindY:(CGFloat)findY angleChe:(BOOL)aChe{
	CGFloat lAngle=0;
	CGFloat lSpeed=0;
    if(findX<=mainX){
		if(findY>=mainY){
			CGFloat xx=mainX-findX;
			CGFloat yy=findY-mainY;
			CGFloat xx2=(xx)/((xx+yy)/90.0);
			lAngle=xx2+90.0;
            lSpeed=(mainX-findX)+(findY-mainY);
		}else{
			CGFloat xx=mainX-findX;
			CGFloat yy=mainY-findY;
			CGFloat yy2=(yy)/((xx+yy)/90.0);
			lAngle=yy2+180.0;
            lSpeed=(mainX-findX)+(mainY-findY);
		}
	}else{
		if(findY>=mainY){
			CGFloat xx=findX-mainX;
			CGFloat yy=findY-mainY;
			CGFloat yy2=(yy)/((xx+yy)/90.0);
			lAngle=yy2;
            lSpeed=(findX-mainX)+(findY-mainY);
		}else{
			CGFloat xx=findX-mainX;
			CGFloat yy=mainY-findY;
			CGFloat xx2=(xx)/((xx+yy)/90.0);
			lAngle=xx2+270.0;
            lSpeed=(findX-mainX)+(mainY-findY);
		}
	}
	
	return (aChe?lAngle:lSpeed);
}
@end
